treatment_names = {'N':'Norite', 'O':'Olivine', 'L':'Larvikite',
                   'M':'Marble', 'D':'Dolomite', 'C':'Control'}
treatments = {}
for i,t in enumerate('nolomndcdlnmocdlomlcdncm'):
    treatments[i+1] = treatment_names[t.upper()]

def get_treatment_plots(T='C'):
    all = treatments.keys()
    all.sort()
    return [i for i in all if treatments[i].startswith(T[0])]

plots_sorted_by_treatment = []
for T in 'CDLMNO':
    plots_sorted_by_treatment.extend(get_treatment_plots(T))
    
# found with plot_rectangles.py
#plots_used = [[(53.411633664973316, 108.11879473039033), (49.41928801934148, 104.47342570815067), (68.07458690772016, 84.04246224996542), (72.06693255335199, 87.68783127220509)], [(49.41928801934148, 104.47342570815067), (45.42694237370965, 100.82805668591101), (64.08224126208832, 80.39709322772576), (68.07458690772016, 84.04246224996542)], [(37.44225108244598, 93.5373186414317), (33.44990543681414, 89.89194961919203), (52.105204325192815, 69.46098616100679), (56.09754997082465, 73.10635518324645)], [(33.44990543681414, 89.89194961919203), (29.457559791182305, 86.24658059695238), (48.11285867956098, 65.81561713876712), (52.105204325192815, 69.46098616100679)], [(21.472868499918636, 78.95584255247306), (17.480522854286804, 75.3104735302334), (36.13582174266548, 54.87951007204815), (40.128167388297314, 58.52487909428781)], [(9.495831563023131, 68.0197354857541), (5.503485917391297, 64.37436646351443), (24.158784805769976, 43.94340300532917), (28.15113045140181, 47.58877202756884)], [(1.5111402717594622, 60.72899744127477), (-2.481205373872373, 57.083628419035115), (16.174093514506303, 36.652664960849854), (20.16643916013814, 40.29803398308952)], [(-6.4735510195042085, 53.43825939679546), (-10.465896665136043, 49.792890374555796), (8.189402223242636, 29.36192691637054), (12.18174786887447, 33.0072959386102)], [(64.08224126208832, 80.39709322772576), (60.08989561645649, 76.75172420548611), (78.74519450483515, 56.32076074730084), (82.73754015046701, 59.966129769540494)], [(60.08989561645649, 76.75172420548611), (56.09754997082465, 73.10635518324645), (74.75284885920333, 52.675391725061175), (78.74519450483515, 56.32076074730084)], [(48.11285867956098, 65.81561713876712), (44.12051303392915, 62.170248116527475), (62.775811922307824, 41.73928465834221), (66.76815756793967, 45.38465368058186)], [(44.12051303392915, 62.170248116527475), (40.128167388297314, 58.52487909428781), (58.783466276675995, 38.093915636102544), (62.775811922307824, 41.73928465834221)], [(36.13582174266548, 54.87951007204815), (32.14347609703364, 51.2341410498085), (50.79877498541232, 30.803177591623225), (54.791120631044166, 34.44854661386288)], [(32.14347609703364, 51.2341410498085), (28.15113045140181, 47.58877202756884), (46.80642933978049, 27.157808569383565), (50.79877498541232, 30.803177591623225)], [(24.158784805769976, 43.94340300532917), (20.16643916013814, 40.29803398308952), (38.82173804851682, 19.867070524904246), (42.81408369414866, 23.512439547143906)], [(16.174093514506303, 36.652664960849854), (12.18174786887447, 33.0072959386102), (30.837046757253155, 12.576332480424929), (34.82939240288499, 16.221701502664587)], [(90.72223144173067, 67.25686781401981), (86.72988579609884, 63.61149879178015), (105.38518468447752, 43.18053533359489), (109.37753033010935, 46.825904355834545)], [(78.74519450483515, 56.32076074730084), (74.75284885920333, 52.675391725061175), (93.408147747582, 32.24442826687591), (97.40049339321385, 35.88979728911557)], [(74.75284885920333, 52.675391725061175), (70.7605032135715, 49.03002270282151), (89.41580210195018, 28.59905924463625), (93.408147747582, 32.24442826687591)], [(66.76815756793967, 45.38465368058186), (62.775811922307824, 41.73928465834221), (81.4311108106865, 21.308321200156932), (85.42345645631835, 24.95369022239659)], [(54.791120631044166, 34.44854661386288), (50.79877498541232, 30.803177591623225), (69.454073873791, 10.372214133437954), (73.44641951942285, 14.017583155677613)], [(46.80642933978049, 27.157808569383565), (42.81408369414866, 23.512439547143906), (61.46938258252734, 3.0814760889586363), (65.46172822815917, 6.726845111198296)], [(34.82939240288499, 16.221701502664587), (30.837046757253155, 12.576332480424929), (49.492345645631836, -7.8546309777603405), (53.48469129126367, -4.209261955520682)], [(30.837046757253155, 12.576332480424929), (26.84470111162132, 8.93096345818527), (45.5, -11.5), (49.492345645631836, -7.8546309777603405)]]

# todooooo
# import plot_rectangles as pr
# plots_utm = pr.migmin_field_rectangles()

#xmin = 599211.37
#ymin = 6615133.59

#plots_utm = []
#for r in plots_used:
#    plots_utm.append([(x+xmin,y+ymin) for x,y in r])

# http://www.ariel.com.au/a/python-point-int-poly.html
# determine if a point is inside a given polygon or not
# Polygon is a list of (x,y) pairs.

def point_inside_polygon(x,y,poly):
    n = len(poly)
    inside =False
    p1x,p1y = poly[0]
    for i in range(n+1):
        p2x,p2y = poly[i % n]
        if y > min(p1y,p2y):
            if y <= max(p1y,p2y):
                if x <= max(p1x,p2x):
                    if p1y != p2y:
                        xinters = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x
                    if p1x == p2x or x <= xinters:
                        inside = not inside
        p1x,p1y = p2x,p2y
    return inside


def find_plot(x, y, rectangles):
    for i,p in rectangles.iteritems():
        if point_inside_polygon(x,y,p):
            return i
    return -100 # so I am sure to recognize it even if I add one to make it 1-based and then forget.

def find_plots(x, y, rectangles):
    return [find_plot(xi, yi, rectangles) for xi, yi in zip(x,y)]
